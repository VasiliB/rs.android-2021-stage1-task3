package subtask1

class Combinator {
//    m –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–µ—Ä–æ–≤ n –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –Ω–∞–π—Ç–∏ 'x' —ç—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–µ—Ä–∞. –ø—Ä–∏ —á–µ–º  m=n üôÇ
//    –Ω–∞–¥–æ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å 4 –ø–ª–∞–∫–∞—Ç–∞, –µ—Å—Ç—å –Ω–∞–±–æ—Ä –∏–∑ 2-—Ö –∫—Ä–∞—Å–æ–∫. –†–∞–∑–Ω—ã—Ö –ø–ª–∞–∫–∞—Ç–æ–≤ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
    // —Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞ –ø–ª–∞–∫–∞—Ç

    // TODO: Complete the following function
    fun checkChooseFromArray(array: Array<Int>): Int? {
        val cards = array[0]
        val paints = array[1]
        var combinations: Int?
        var x: Int? = null
        for (i in 1..paints) {
            combinations = (factorialX(paints) / (factorialX(i) * factorialX(paints - i)))
            if (combinations == cards) {
                x = i
                break
            }
        }
        return x
    }

    private fun factorialX(input: Int): Int {
        var result = 1
        for (i in 1..input) {
            result *= i
        }
        return result
    }
}
